/*! powerbi-client v2.0.0-beta.6 | (c) 2016 Microsoft Corporation MIT */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["powerbi-client"]=t():e["powerbi-client"]=t()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}var i=r(1);t.service=i;var o=r(7);t.factories=o,n(r(5)),n(r(6)),n(r(2)),window.Powerbi=i.Service,window.powerbi=new i.Service(o.hpmFactory,o.wpmpFactory,o.routerFactory)},function(e,t,r){var n=r(2),i=r(5),o=r(6),s=r(3),a=function(){function e(t,r,n,i){var o=this;void 0===i&&(i={}),this.hpmFactory=t,this.wpmp=r(i.wpmpName,i.logMessages),this.router=n(this.wpmp),this.router.post("/reports/:uniqueId/events/:eventName",function(e,t){var r={type:"report",id:e.params.uniqueId,name:e.params.eventName,value:e.body};o.handleEvent(r)}),this.router.post("/reports/:uniqueId/pages/:pageName/events/:eventName",function(e,t){var r={type:"report",id:e.params.uniqueId,name:e.params.eventName,value:e.body};o.handleEvent(r)}),this.router.post("/reports/:uniqueId/visuals/:pageName/events/:eventName",function(e,t){var r={type:"report",id:e.params.uniqueId,name:e.params.eventName,value:e.body};o.handleEvent(r)}),this.embeds=[],this.config=s.assign({},e.defaultConfig,i),this.config.autoEmbedOnContentLoaded&&this.enableAutoEmbed()}return e.prototype.init=function(e,t){var r=this;void 0===t&&(t=void 0),e=e&&e instanceof HTMLElement?e:document.body;var i=Array.prototype.slice.call(e.querySelectorAll("["+n.Embed.embedUrlAttribute+"]"));return i.map(function(e){return r.embed(e,t)})},e.prototype.embed=function(e,t){void 0===t&&(t={});var r,n=e;return r=n.powerBiEmbed?this.embedExisting(n,t):this.embedNew(n,t)},e.prototype.embedNew=function(t,r){var o=r.type||t.getAttribute(n.Embed.typeAttribute);if(!o)throw new Error("Attempted to embed using config "+JSON.stringify(r)+" on element "+t.outerHTML+", but could not determine what type of component to embed. You must specify a type in the configuration or as an attribute such as '"+n.Embed.typeAttribute+'="'+i.Report.type.toLowerCase()+"\"'.");r.type=o;var a=s.find(function(e){return o===e.type.toLowerCase()},e.components);if(!a)throw new Error("Attempted to embed component of type: "+o+" but did not find any matching component.  Please verify the type you specified is intended.");var c=new a(this,this.hpmFactory,t,r);return t.powerBiEmbed=c,this.embeds.push(c),c},e.prototype.embedExisting=function(e,t){var r=s.find(function(t){return t.element===e},this.embeds);if(!r)throw new Error("Attempted to embed using config "+JSON.stringify(t)+" on element "+e.outerHTML+" which already has embedded comopnent associated, but could not find the existing comopnent in the list of active components. This could indicate the embeds list is out of sync with the DOM, or the component is referencing the incorrect HTML element.");return r.load(t),r},e.prototype.enableAutoEmbed=function(){var e=this;window.addEventListener("DOMContentLoaded",function(t){return e.init(document.body)},!1)},e.prototype.get=function(e){var t=e;if(!t.powerBiEmbed)throw new Error("You attempted to get an instance of powerbi component associated with element: "+e.outerHTML+" but there was no associated instance.");return t.powerBiEmbed},e.prototype.find=function(e){return s.find(function(t){return t.config.uniqueId===e},this.embeds)},e.prototype.reset=function(e){var t=e;if(t.powerBiEmbed){s.remove(function(e){return e===t.powerBiEmbed},this.embeds),delete t.powerBiEmbed;var r=e.querySelector("iframe");r&&r.remove()}},e.prototype.handleEvent=function(e){var t=s.find(function(t){return t.config.type===e.type&&t.config.uniqueId===e.id},this.embeds);t&&t.handleEvent(e)},e.prototype.getTargetUrl=function(e){var t;if(e)if("page"===e.type)t="/report/pages/"+e.name;else{if("visual"!==e.type)throw new Error("target.type must be either 'page' or 'visual'. You passed: "+e.type);t="/report/visuals/"+e.id}else t="/report";return t},e.components=[o.Tile,i.Report],e.defaultConfig={autoEmbedOnContentLoaded:!1,onError:function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];return console.log(e[0],e.slice(1))}},e}();t.Service=a},function(e,t,r){var n=r(3),i=r(4),o=function(){function e(t,r,i,o){var s=this;this.allowedEvents=[],Array.prototype.push.apply(this.allowedEvents,e.allowedEvents),this.eventHandlers=[],this.service=t,this.element=i;var a=n.assign({},e.defaultSettings,o.settings);this.config=n.assign({settings:a},o),this.config.accessToken=this.getAccessToken(t.accessToken),this.config.embedUrl=this.getEmbedUrl(),this.config.id=this.getId(),this.config.uniqueId=this.getUniqueId();var c='<iframe style="width:100%;height:100%;" src="'+this.config.embedUrl+'" scrolling="no" allowfullscreen="true"></iframe>';this.element.innerHTML=c,this.iframe=this.element.childNodes[0],this.iframe.addEventListener("load",function(){return s.load(s.config)},!1),this.hpm=r(this.iframe.contentWindow,this.service.wpmp)}return e.prototype.load=function(e){var t=i.validateLoad(e);if(t)throw t;return this.hpm.post("/report/load",e,{uid:this.config.uniqueId})["catch"](function(e){throw e.body})},e.prototype.handleEvent=function(e){this.eventHandlers.filter(function(t){return t.test(e)}).forEach(function(t){t.handle(e.value)})},e.prototype.off=function(e,t){var r=this,i={name:e,type:null,id:null,value:null};if(t)n.remove(function(e){return e.test(i)&&e.handle===t},this.eventHandlers);else{var o=this.eventHandlers.filter(function(e){return e.test(i)});o.forEach(function(e){n.remove(function(t){return t===e},r.eventHandlers)})}},e.prototype.on=function(e,t){if(-1===this.allowedEvents.indexOf(e))throw new Error("eventName is must be one of "+this.allowedEvents+". You passed: "+e);this.eventHandlers.push({test:function(t){return t.name===e},handle:t})},e.prototype.getAccessToken=function(t){var r=this.config.accessToken||this.element.getAttribute(e.accessTokenAttribute)||t;if(!r)throw new Error("No access token was found for element. You must specify an access token directly on the element using attribute '"+e.accessTokenAttribute+"' or specify a global token at: powerbi.accessToken.");return r},e.prototype.getEmbedUrl=function(){var t=this.config.embedUrl||this.element.getAttribute(e.embedUrlAttribute);if("string"!=typeof t||0===t.length)throw new Error("Embed Url is required, but it was not found. You must provide an embed url either as part of embed configuration or as attribute '"+e.embedUrlAttribute+"'.");return t},e.prototype.getUniqueId=function(){return this.config.uniqueId||this.element.getAttribute(e.nameAttribute)||n.createRandomString()},e.prototype.fullscreen=function(){var e=this.iframe.requestFullscreen||this.iframe.msRequestFullscreen||this.iframe.mozRequestFullScreen||this.iframe.webkitRequestFullscreen;e.call(this.iframe)},e.prototype.exitFullscreen=function(){if(this.isFullscreen(this.iframe)){var e=document.exitFullscreen||document.mozCancelFullScreen||document.webkitExitFullscreen||document.msExitFullscreen;e.call(document)}},e.prototype.isFullscreen=function(e){var t=["fullscreenElement","webkitFullscreenElement","mozFullscreenScreenElement","msFullscreenElement"];return t.some(function(t){return document[t]===e})},e.allowedEvents=["loaded"],e.accessTokenAttribute="powerbi-access-token",e.embedUrlAttribute="powerbi-embed-url",e.nameAttribute="powerbi-name",e.typeAttribute="powerbi-type",e.defaultSettings={filterPaneEnabled:!0},e}();t.Embed=o},function(e,t){function r(e,t,r){var n;if("function"==typeof CustomEvent?n=new CustomEvent(t,{detail:r,bubbles:!0,cancelable:!0}):(n=document.createEvent("CustomEvent"),n.initCustomEvent(t,!0,!0,r)),e.dispatchEvent(n),!n.defaultPrevented&&n.returnValue){var i="on"+t.replace("-",""),o=e.getAttribute(i);o&&eval.call(e,o)}}function n(e,t){if(!Array.isArray(t))throw new Error("You attempted to call find with second parameter that was not an array. You passed: "+t);var r;return t.some(function(t,n){return e(t)?(r=n,!0):void 0}),r}function i(e,t){var r=n(e,t);return t[r]}function o(e,t){var r=n(e,t);t.splice(r,1)}function s(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];var r=e[0];if(void 0===r||null===r)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(r),i=1;i<arguments.length;i++){var o=arguments[i];if(void 0!==o&&null!==o)for(var s in o)o.hasOwnProperty(s)&&(n[s]=o[s])}return n}function a(){return(Math.random()+1).toString(36).substring(7)}t.raiseCustomEvent=r,t.findIndex=n,t.find=i,t.remove=o,t.assign=s,t.createRandomString=a},function(e,t,r){/*! powerbi-models v0.3.0 | (c) 2016 Microsoft Corporation MIT */
!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){function n(e){return e.message||(e.message=e.path+" is invalid. Not meeting "+e.keyword+" constraint"),delete e.path,delete e.keyword,e}function i(e,t){return function(r){var i=u(e,t),o=i(r);return o?void 0:i.errors.map(n)}}function o(e){return void 0!==e.table&&void 0!==e.measure}function s(e){return void 0!==e.table&&void 0!==e.column}function a(e){return void 0!==e.table&&void 0!==e.hierarchy&&void 0!==e.hierarchyLevel}var c=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)};t.advancedFilterSchema=r(1),t.filterSchema=r(2),t.loadSchema=r(3),t.pageSchema=r(4),t.pageTargetSchema=r(5),t.settingsSchema=r(6),t.targetSchema=r(7),t.valueFilterSchema=r(8),t.visualTargetSchema=r(9);var u=r(10);t.validateSettings=i(t.settingsSchema,{schemas:{valueFilter:t.valueFilterSchema,advancedFilter:t.advancedFilterSchema}}),t.validateLoad=i(t.loadSchema,{schemas:{settings:t.settingsSchema,valueFilter:t.valueFilterSchema,advancedFilter:t.advancedFilterSchema}}),t.validateTarget=i(t.targetSchema),t.validatePage=i(t.pageSchema),t.validateFilter=i(t.filterSchema,{schemas:{valueFilter:t.valueFilterSchema,advancedFilter:t.advancedFilterSchema}}),t.isMeasure=o,t.isColumn=s,t.isHierarchy=a;var d=function(){function e(e){this.target=e}return e.prototype.toJSON=function(){return{$schema:this.schemaUrl,target:this.target}},e}();t.Filter=d;var p=function(e){function t(r,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];if(e.call(this,r),this.operator=n,this.schemaUrl=t.schemaUrl,0===i.length)throw new Error("values must be a non-empty array. You passed: "+i);Array.isArray(i[0])?this.values=i[0]:this.values=i}return c(t,e),t.prototype.toJSON=function(){var t=e.prototype.toJSON.call(this);return t.operator=this.operator,t.values=this.values,t},t.schemaUrl="http://powerbi.com/product/schema#basic",t}(d);t.ValueFilter=p;var h=function(e){function t(r,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];if(e.call(this,r),this.schemaUrl=t.schemaUrl,"string"!=typeof n||0===n.length)throw new Error("logicalOperator must be a valid operator, You passed: "+n);if(this.logicalOperator=n,0===i.length)throw new Error("conditions must be a non-empty array. You passed: "+i);if(i.length>2)throw new Error("AdvancedFilters may not have more than two conditions. You passed: "+i.length);Array.isArray(i[0])?this.conditions=i[0]:this.conditions=i}return c(t,e),t.prototype.toJSON=function(){var t=e.prototype.toJSON.call(this);return t.logicalOperator=this.logicalOperator,t.conditions=this.conditions,t},t.schemaUrl="http://powerbi.com/product/schema#advanced",t}(d);t.AdvancedFilter=h},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{target:{oneOf:[{type:"object",properties:{table:{type:"string"},column:{type:"string"}},required:["table","column"]},{type:"object",properties:{table:{type:"string"},hierarchy:{type:"string"},hierarchyLevel:{type:"string"}},required:["table","hierarchy","hierarchyLevel"]},{type:"object",properties:{table:{type:"string"},measure:{type:"string"}},required:["table","measure"]}]},logicalOperator:{type:"string"},conditions:{type:"array",items:{type:"object",properties:{value:{type:"string"},operator:{type:"string"}},required:["value","operator"]}}},required:["target","logicalOperator","conditions"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",oneOf:[{$ref:"#valueFilter"},{$ref:"#advancedFilter"}],invalidMessage:"filter is invalid"}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{accessToken:{type:"string",messages:{type:"accessToken must be a string",required:"accessToken is required"},invalidMessage:"accessToken property is invalid"},id:{type:"string",messages:{type:"id must be a string",required:"id is required"},invalidMessage:"id property is invalid"},settings:{$ref:"#settings"},pageName:{type:"string",messages:{type:"pageName must be a string"}},filter:{type:"object",oneOf:[{$ref:"#valueFilter"},{$ref:"#advancedFilter"}],invalidMessage:"filter property is invalid"}},required:["accessToken","id"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{name:{type:"string",messages:{type:"name must be a string",required:"name is required"}}},required:["name"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{type:{type:"string","enum":["page"],messages:{type:"type must be a string","enum":"type must be 'page'",required:"type is required"}},name:{type:"string",messages:{type:"name must be a string",required:"name is required"}}},required:["type","name"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{filterPaneEnabled:{type:"boolean",messages:{type:"filterPaneEnabled must be a boolean"}},navContentPaneEnabled:{type:"boolean",messages:{type:"navContentPaneEnabled must be a boolean"}}}}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",oneOf:[{$ref:"#pageTarget"},{$ref:"#visualTarget"}]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{target:{type:"object",properties:{table:{type:"string"},column:{type:"string"},hierarchy:{type:"string"},hierarchyLevel:{type:"string"},measure:{type:"string"}},required:["table"]},operator:{type:"string"},values:{type:"array",items:{type:"string"}}},required:["target","operator","values"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{type:{type:"string","enum":["visual"],messages:{type:"type must be a string","enum":"type must be 'visual'",required:"type is required"}},id:{type:"string",messages:{type:"id must be a string",required:"id is required"}}},required:["type","id"]}},function(e,t,r){e.exports=r(11)},function(e,t,r){(function(t){"use strict";function n(e){var t=e instanceof RegExp?e.toString():new RegExp(e).toString();return w?(t=t.substr(1,t.length-2),t="/"+t.replace(g,"\\$&")+"/"):t}function i(e,t){return v.lastIndex=0,v.test(t)?e+"."+t:e+'["'+t+'"]'}function o(e){var t=Object.prototype.toString.call(e);return t.substr(8,t.length-9).toLowerCase()}function s(e){return(0|e)===e}function a(e){var t,r,n=Object.keys(e),i=[],o={};for(r=0;r<n.length;r++)t=S[n[r]],t&&(t.type?(o[t.type]||(o[t.type]=[]),o[t.type].push(t)):i.push(t));return i.concat(Object.keys(o).reduce(function(e,t){return e.concat(o[t])},[]))}function c(e){var t=e.replace(m,"$1");return isNaN(+t)?'"'===t[0]?'[\\"'+t.substr(1,t.length-2)+'\\"]':'." + '+t+' + "':"."+t}function u(e){return'"'+e.replace(l,c).substr(5)+'"'}function d(e){var t,r,n=e,i=o(e);if("object"===i){n={};for(t in e)n[t]=d(e[t])}else if("array"===i)for(n=[],r=0;r<e.length;r++)n[r]=d(e[r]);else{if("regexp"===i)return new RegExp(e);if("date"===i)return new Date(e.toJSON())}return n}function p(){this.objects=[],this.properties=[]}function h(e,t,r,n,i){var s,a,c,u,f;if("object"!==o(e))return t;if(e=n.resolve(e),void 0===t&&e.hasOwnProperty("default")&&(t=d(e["default"])),s=o(t),"object"===s&&"object"===o(e.properties)){for(c in e.properties)a=h(e.properties[c],t[c],r,n),void 0!==a&&(t[c]=a);for(c in t)c in e.properties||e.additionalProperties!==!1&&(r!==!1||e.additionalProperties)||(i?i.mark(t,c):delete t[c])}else if("array"===s&&e.items){if("array"===o(e.items))for(u=0;u<e.items.length;u++)a=h(e.items[u],t[u],r,n),(void 0!==a||u<t.length)&&(t[u]=a);else if(t.length)for(u=0;u<t.length;u++)t[u]=h(e.items,t[u],r,n)}else if("array"===o(e.allOf)&&e.allOf.length){for(f=new p,u=0;u<e.allOf.length;u++)t=h(e.allOf[u],t,r,n,f);f.deleteDuplicates(),f.dispose()}return t}function f(e,t){function r(e){var t,r=p.resolve(e),n=e.$ref,o=m[n];return o||(o=m[n]={key:l(),func:function(e){return t(e)}},t=i(r),Object.defineProperty(o.func,"errors",{get:function(){return t.errors}}),g[o.key]=o.func),"refs."+o.key}function i(e){function i(e){var t=l();return c.def(t,e),t}function o(e,s,d){function p(r,n){var i,o=e,a=n&&s.properties&&s.properties[n]&&s.properties[n].requiredMessage||s.invalidMessage;a||(a=n&&s.properties&&s.properties[n]&&s.properties[n].messages&&s.properties[n].messages[r]||s.messages&&s.messages[r]),e.indexOf("[")>-1?(o=u(e),n&&(o=o?o+' + ".'+n+'"':n),c("errors.push({")("path: "+o+", ")('keyword: "'+r+'"'+(a?",":"")),a&&c('message: "'+a+'"'),c("})")):(i=l(),o=o.substr(5),n&&(o=o?o+"."+n:n),g[i]={path:o,keyword:r},a&&(g[i].message=a),c("errors.push(refs."+i+")")),d||t.greedy||c("return (validate.errors = errors) && false")}var h,f,m,y,b,w,x,A,E;if(void 0!==s.$ref)return f=r(s),m=u(e),y=i(0),void c("if (!"+f+"("+e+")) {")("if ("+f+".errors) {")("errors.push.apply(errors, "+f+".errors)")("for ("+y+" = 0; "+y+" < "+f+".errors.length; "+y+"++) {")("if ("+f+".errors["+y+"].path) {")("errors[errors.length - "+f+".errors.length + "+y+"].path = "+m+' + "." + '+f+".errors["+y+"].path")("} else {")("errors[errors.length - "+f+".errors.length + "+y+"].path = "+m)("}")("}")("}")("}");for(h={path:e,schema:s,code:c,declare:i,validate:o,error:p,noFailFast:d},x=a(s),E=0;E<x.length;E++)A=x[E],A.type&&b!==A.type&&(b&&c("}"),b=A.type,c("if ("+j[A.type](e)+") {")),A(h);b&&c("}"),s.format&&t.formats&&(w=t.formats[s.format],w&&("string"==typeof w||w instanceof RegExp?(c("if (!("+n(w)+").test("+h.path+")) {"),p("format"),c("}")):"function"==typeof w&&((v.formats||(v.formats={}))[s.format]=w,(v.schemas||(v.schemas={}))[s.format]=s,c('if (!formats["'+s.format+'"]('+h.path+', schemas["'+s.format+'"])) {'),p("format"),c("}"))))}var c=x("validate","data")("var errors = []");return o("data",e),c("return (validate.errors = errors) && errors.length === 0"),s=c.compile(v),s.errors=[],s.build=function(t,r){return h(e,r&&r.copy===!1?t:d(t),r&&r.additionalProperties,p)},s}if("object"!==o(e))throw new Error(y);t=t||{};var s,c=t.missing$Ref||!1,p=new P(e,t.schemas,c),f=0,l=function(){return"i"+f++},m={},g={errors:[]},v={equal:A,unique:E,refs:g};return i(e)}var l=/\[.+?\]/g,m=/\[?(.*?)?\]/,g=/[\/]/g,v=/^[a-z_$][0-9a-z]*$/gi,y="jsen: invalid schema object",b="object"==typeof window&&!!window.navigator,w="object"==typeof t&&"v0"===t.version.split(".")[0],x=r(13),A=r(14),E=r(15),P=r(16),O=r(18),j={},S={};j["null"]=function(e){return e+" === null"},j["boolean"]=function(e){return"typeof "+e+' === "boolean"'},j.string=function(e){return"typeof "+e+' === "string"'},j.number=function(e){return"typeof "+e+' === "number"'},j.integer=function(e){return"typeof "+e+' === "number" && !('+e+" % 1)"},j.array=function(e){return e+" !== undefined && Array.isArray("+e+")"},j.object=function(e){return e+" !== undefined && typeof "+e+' === "object" && '+e+" !== null && !Array.isArray("+e+")"},j.date=function(e){return e+" !== undefined && "+e+" instanceof Date"},S.type=function(e){if(e.schema.type){var t=Array.isArray(e.schema.type)?e.schema.type:[e.schema.type],r=t.map(function(t){return j[t]?j[t](e.path)||"true":"true"}).join(" || ");r&&(e.code("if (!("+r+")) {"),e.error("type"),e.code("}"))}},S["enum"]=function(e){var t,r,n,i=e.schema["enum"],o=[];if(Array.isArray(i)){for(n=0;n<i.length;n++)t=i[n],r=typeof t,null===t||["boolean","number","string"].indexOf(r)>-1?"string"===r?o.push(e.path+' === "'+t+'"'):o.push(e.path+" === "+t):o.push("equal("+e.path+", "+JSON.stringify(t)+")");e.code("if (!("+o.join(" || ")+")) {"),e.error("enum"),e.code("}")}},S.minimum=function(e){"number"==typeof e.schema.minimum&&(e.code("if ("+e.path+" < "+e.schema.minimum+") {"),e.error("minimum"),e.code("}"))},S.exclusiveMinimum=function(e){e.schema.exclusiveMinimum===!0&&"number"==typeof e.schema.minimum&&(e.code("if ("+e.path+" === "+e.schema.minimum+") {"),e.error("exclusiveMinimum"),e.code("}"))},S.maximum=function(e){"number"==typeof e.schema.maximum&&(e.code("if ("+e.path+" > "+e.schema.maximum+") {"),e.error("maximum"),e.code("}"))},S.exclusiveMaximum=function(e){e.schema.exclusiveMaximum===!0&&"number"==typeof e.schema.maximum&&(e.code("if ("+e.path+" === "+e.schema.maximum+") {"),e.error("exclusiveMaximum"),e.code("}"))},S.multipleOf=function(e){if("number"==typeof e.schema.multipleOf){var t=e.schema.multipleOf,r=t.toString().length-t.toFixed(0).length-1,n=r>0?Math.pow(10,r):1,i=e.path;r>0?e.code("if (+(Math.round(("+i+" * "+n+') + "e+" + '+r+') + "e-" + '+r+") % "+t*n+" !== 0) {"):e.code("if ((("+i+" * "+n+") % "+t*n+") !== 0) {"),e.error("multipleOf"),e.code("}")}},S.minLength=function(e){s(e.schema.minLength)&&(e.code("if ("+e.path+".length < "+e.schema.minLength+") {"),e.error("minLength"),e.code("}"))},S.maxLength=function(e){s(e.schema.maxLength)&&(e.code("if ("+e.path+".length > "+e.schema.maxLength+") {"),e.error("maxLength"),e.code("}"))},S.pattern=function(e){var t="string"==typeof e.schema.pattern?new RegExp(e.schema.pattern):e.schema.pattern;"regexp"===o(t)&&(e.code("if (!("+n(t)+").test("+e.path+")) {"),e.error("pattern"),e.code("}"))},S.format=function(e){"string"==typeof e.schema.format&&O[e.schema.format]&&(e.code("if (!("+O[e.schema.format]+").test("+e.path+")) {"),e.error("format"),e.code("}"))},S.minItems=function(e){s(e.schema.minItems)&&(e.code("if ("+e.path+".length < "+e.schema.minItems+") {"),e.error("minItems"),e.code("}"))},S.maxItems=function(e){s(e.schema.maxItems)&&(e.code("if ("+e.path+".length > "+e.schema.maxItems+") {"),e.error("maxItems"),e.code("}"))},S.additionalItems=function(e){e.schema.additionalItems===!1&&Array.isArray(e.schema.items)&&(e.code("if ("+e.path+".length > "+e.schema.items.length+") {"),e.error("additionalItems"),e.code("}"))},S.uniqueItems=function(e){e.schema.uniqueItems&&(e.code("if (unique("+e.path+").length !== "+e.path+".length) {"),e.error("uniqueItems"),e.code("}"))},S.items=function(e){var t=e.declare(0),r=0;if("object"===o(e.schema.items))e.code("for ("+t+"; "+t+" < "+e.path+".length; "+t+"++) {"),e.validate(e.path+"["+t+"]",e.schema.items,e.noFailFast),e.code("}");else if(Array.isArray(e.schema.items)){for(;r<e.schema.items.length;r++)e.code("if ("+e.path+".length - 1 >= "+r+") {"),e.validate(e.path+"["+r+"]",e.schema.items[r],e.noFailFast),e.code("}");"object"===o(e.schema.additionalItems)&&(e.code("for ("+t+" = "+r+"; "+t+" < "+e.path+".length; "+t+"++) {"),e.validate(e.path+"["+t+"]",e.schema.additionalItems,e.noFailFast),e.code("}"))}},S.maxProperties=function(e){s(e.schema.maxProperties)&&(e.code("if (Object.keys("+e.path+").length > "+e.schema.maxProperties+") {"),e.error("maxProperties"),e.code("}"))},S.minProperties=function(e){s(e.schema.minProperties)&&(e.code("if (Object.keys("+e.path+").length < "+e.schema.minProperties+") {"),e.error("minProperties"),e.code("}"))},S.required=function(e){if(Array.isArray(e.schema.required))for(var t=0;t<e.schema.required.length;t++)e.code("if ("+i(e.path,e.schema.required[t])+" === undefined) {"),e.error("required",e.schema.required[t]),e.code("}")},S.properties=function(e){if(!e.validatedProperties){var t,r,n,s=e.schema.properties,a="object"===o(s)?Object.keys(s):[],c=e.schema.patternProperties,u="object"===o(c)?Object.keys(c):[],d=e.schema.additionalProperties,p=d===!1||"object"===o(d);if(a.length&&!u.length&&!p){for(r=0;r<a.length;r++)t=a[r],n=i(e.path,t),e.code("if ("+n+" !== undefined) {"),e.validate(n,s[t],e.noFailFast),e.code("}");e.validatedProperties=!0}}},S.patternProperties=S.additionalProperties=function(e){if(!e.validatedProperties){var t,r,s,a,c,u,d,p=e.schema.properties,h="object"===o(p)?Object.keys(p):[],f=e.schema.patternProperties,l="object"===o(f)?Object.keys(f):[],m=e.schema.additionalProperties,g=m===!1||"object"===o(m);if(h.length||l.length||g){for(t=e.declare("[]"),r=e.declare('""'),s=e.declare(0),g&&(a=e.declare(!1)),e.code(t+" = Object.keys("+e.path+")"),e.code("for ("+s+"; "+s+" < "+t+".length; "+s+"++) {")(r+" = "+t+"["+s+"]")("if ("+e.path+"["+r+"] === undefined) {")("continue")("}"),g&&e.code(a+" = false"),d=0;d<h.length;d++)c=h[d],e.code((d?"else ":"")+"if ("+r+' === "'+c+'") {'),g&&e.code(a+" = true"),e.validate(i(e.path,c),p[c],e.noFailFast),e.code("}");for(d=0;d<l.length;d++)u=l[d],e.code("if (("+n(u)+").test("+r+")) {"),g&&e.code(a+" = true"),e.validate(e.path+"["+r+"]",f[u],e.noFailFast),e.code("}");g&&(e.code("if (!"+a+") {"),m===!1?e.error("additionalProperties"):e.validate(e.path+"["+r+"]",m,e.noFailFast),e.code("}")),e.code("}"),e.validatedProperties=!0}}},S.dependencies=function(e){if("object"===o(e.schema.dependencies)){var t,r,n=0;for(t in e.schema.dependencies){if(r=e.schema.dependencies[t],e.code("if ("+i(e.path,t)+" !== undefined) {"),"object"===o(r))e.validate(e.path,r,e.noFailFast);else for(n;n<r.length;n++)e.code("if ("+i(e.path,r[n])+" === undefined) {"),e.error("dependencies",r[n]),e.code("}");e.code("}")}}},S.allOf=function(e){if(Array.isArray(e.schema.allOf))for(var t=0;t<e.schema.allOf.length;t++)e.validate(e.path,e.schema.allOf[t],e.noFailFast)},S.anyOf=function(e){if(Array.isArray(e.schema.anyOf)){var t=e.declare(0),r=e.declare(0),n=e.declare(!1),i=0;for(e.code(r+" = errors.length");i<e.schema.anyOf.length;i++)e.code("if (!"+n+") {"),e.code(t+" = errors.length"),e.validate(e.path,e.schema.anyOf[i],!0),e.code(n+" = errors.length === "+t)("}");e.code("if (!"+n+") {"),e.error("anyOf"),e.code("} else {")("errors.length = "+r)("}")}},S.oneOf=function(e){if(Array.isArray(e.schema.oneOf)){var t=e.declare(0),r=e.declare(0),n=e.declare(0),i=0;for(e.code(r+" = errors.length");i<e.schema.oneOf.length;i++)e.code(n+" = errors.length"),e.validate(e.path,e.schema.oneOf[i],!0),e.code("if (errors.length === "+n+") {")(t+"++")("}");e.code("if ("+t+" !== 1) {"),e.error("oneOf"),e.code("} else {")("errors.length = "+r)("}")}},S.not=function(e){if("object"===o(e.schema.not)){var t=e.declare(0);e.code(t+" = errors.length"),e.validate(e.path,e.schema.not,!0),e.code("if (errors.length === "+t+") {"),e.error("not"),e.code("} else {")("errors.length = "+t)("}")}},["minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf"].forEach(function(e){S[e].type="number"}),["minLength","maxLength","pattern","format"].forEach(function(e){S[e].type="string"}),["minItems","maxItems","additionalItems","uniqueItems","items"].forEach(function(e){S[e].type="array"}),["maxProperties","minProperties","required","properties","patternProperties","additionalProperties","dependencies"].forEach(function(e){S[e].type="object"}),p.prototype.mark=function(e,t){var r,n=this.objects.indexOf(e);return 0>n?(this.objects.push(e),r={},r[t]=1,void this.properties.push(r)):(r=this.properties[n],void(r[t]=r[t]?r[t]+1:1))},p.prototype.deleteDuplicates=function(){var e,t;for(t=0;t<this.properties.length;t++)for(e in this.properties[t])this.properties[t][e]>1&&delete this.objects[t][e]},p.prototype.dispose=function(){this.objects.length=0,this.properties.length=0},f.browser=b,f.clone=d,f.equal=A,f.unique=E,f.resolve=P.resolvePointer,e.exports=f}).call(t,r(12))},function(e,t){function r(){p&&u&&(p=!1,u.length?d=u.concat(d):h=-1,d.length&&n())}function n(){if(!p){var e=s(r);p=!0;for(var t=d.length;t;){for(u=d,d=[];++h<t;)u&&u[h].run();h=-1,t=d.length}u=null,p=!1,a(e)}}function i(e,t){this.fun=e,this.array=t}function o(){}var s,a,c=e.exports={};!function(){try{s=setTimeout}catch(e){s=function(){throw new Error("setTimeout is not defined")}}try{a=clearTimeout}catch(e){a=function(){throw new Error("clearTimeout is not defined")}}}();var u,d=[],p=!1,h=-1;c.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];d.push(new i(e,t)),1!==d.length||p||s(n,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},c.title="browser",c.browser=!0,c.env={},c.argv=[],c.version="",c.versions={},c.on=o,c.addListener=o,c.once=o,c.off=o,c.removeListener=o,c.removeAllListeners=o,c.emit=o,c.binding=function(e){throw new Error("process.binding is not supported")},c.cwd=function(){return"/"},c.chdir=function(e){throw new Error("process.chdir is not supported")},c.umask=function(){return 0}},function(e,t){"use strict";e.exports=function(){var e=arguments[0]||"",t=[].join.call([].slice.call(arguments,1),", "),r="",n="",i=1,o="  ",s="{[",a="}]",c=function(){return new Array(i+1).join(o)},u=function(e){r+=c()+e+"\n"},d=function(e){var t=e[0],r=e[e.length-1];return a.indexOf(t)>-1&&s.indexOf(r)>-1?(i--,u(e),i++):s.indexOf(r)>-1?(u(e),i++):a.indexOf(t)>-1?(i--,u(e)):u(e),d};return d.def=function(e,t){return n+=c()+"var "+e+(void 0!==t?" = "+t:"")+"\n",d},d.toSource=function(){return"function "+e+"("+t+") {\n"+n+"\n"+r+"\n}"},d.compile=function(e){var t="return ("+d.toSource()+")",r=e||{},n=Object.keys(r),i=n.map(function(e){return r[e]});return Function.apply(null,n.concat(t)).apply(null,i)},d}},function(e,t){"use strict";function r(e){var t=Object.prototype.toString.call(e);return t.substr(8,t.length-9).toLowerCase()}function n(e,t){var r,n,o=Object.keys(e).sort(),s=Object.keys(t).sort();if(!i(o,s))return!1;for(r=0;r<o.length;r++)if(n=o[r],!i(e[n],t[n]))return!1;return!0}function i(e,t){var o,s=typeof e,a=typeof t;if("object"===s&&(s=r(e)),"object"===a&&(a=r(t)),s!==a)return!1;if("object"===s)return n(e,t);if("regexp"===s)return e.toString()===t.toString();if("array"===s){if(e.length!==t.length)return!1;for(o=0;o<e.length;o++)if(!i(e[o],t[o]))return!1;return!0}return e===t}e.exports=i},function(e,t,r){"use strict";function n(e,t,r){for(var n=0,i=e.length;i>n;n++)if(r(e[n],t))return n;return-1}var i=r(14);e.exports=function(e){return e.filter(function(e,t,r){return n(r,e,i)===t})},e.exports.findIndex=n},function(e,t,r){"use strict";function n(e,t){if(!t.length)return e;var r,i=t.shift();e&&"object"==typeof e&&e.hasOwnProperty(i)&&(r=e[i]);{if(!t.length)return r;if(r&&"object"==typeof r)return n(r,t)}}function i(e){var t,r=e.indexOf("#");return 0!==r?[e]:(e=e.substr(r+1))?(t=e.split("/").map(function(e){return decodeURIComponent(e).replace(/~1/g,"/").replace(/~0/g,"~")}),"/"===e[0]&&t.shift(),t):[]}function o(e,t){return e&&"object"==typeof e?e.id===t?e:Object.keys(e).reduce(function(r,n){return r||o(e[n],t)},void 0):void 0}function s(e){var t,r,n=Object.keys(e),i={};for(r=0;r<n.length;r++)t=n[r],i[t]=new a(e[t]);return i}function a(e,t,r){this.rootSchema=e,this.resolvedRootSchema=null,this.cache={},this.missing$Ref=r,this.resolvers=t&&"object"==typeof t?s(t):null}var c=r(17),u="jsen: invalid schema reference";a.prototype.resolveRef=function(e){var t,r,s,a=new Error(u+" "+e),d=this.rootSchema,p=this.resolvedRootSchema;if(!e||"string"!=typeof e)throw a;if(e===c.id&&(s=c),void 0===s&&p&&(s=o(p,e)),void 0===s&&(s=o(d,e)),void 0===s&&(r=i(e),p&&(s=n(p,r.slice(0))),void 0===s&&(s=n(d,r.slice(0)))),void 0===s&&r.length&&this.resolvers&&(t=n(this.resolvers,r),t&&(s=t.resolve(t.rootSchema))),void 0===s||"object"!=typeof s){if(!this.missing$Ref)throw a;s={}}return this.cache[e]===s?s:(this.cache[e]=s,void 0!==s.$ref&&(s=this.cache[e]=this.resolveRef(s.$ref)),s)},a.prototype.resolve=function(e){if(!e||"object"!=typeof e)return e;var t=e.$ref,r=this.cache[t];return void 0===t?e:void 0!==r?r:(r=this.resolveRef(t),e===this.rootSchema&&e!==r&&(this.resolvedRootSchema=r),r)},a.resolvePointer=function(e,t){return n(e,i(t))},e.exports=a},function(e,t){e.exports={id:"http://json-schema.org/draft-04/schema#",$schema:"http://json-schema.org/draft-04/schema#",description:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},positiveInteger:{type:"integer",minimum:0},positiveIntegerDefault0:{allOf:[{$ref:"#/definitions/positiveInteger"},{"default":0}]},simpleTypes:{anyOf:[{"enum":["array","boolean","integer","null","number","object","string","any"]},{type:"string"}]},stringArray:{type:"array",items:{type:"string"},minItems:1,uniqueItems:!0}},type:"object",properties:{id:{type:"string",format:"uri"},$schema:{type:"string",format:"uri"},title:{type:"string"},description:{type:"string"},"default":{},multipleOf:{type:"number",minimum:0,exclusiveMinimum:!0},maximum:{type:"number"},exclusiveMaximum:{type:"boolean","default":!1},minimum:{type:"number"},exclusiveMinimum:{type:"boolean","default":!1},maxLength:{$ref:"#/definitions/positiveInteger"},minLength:{$ref:"#/definitions/positiveIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{anyOf:[{type:"boolean"},{$ref:"#"}],"default":{}},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],"default":{}},maxItems:{$ref:"#/definitions/positiveInteger"},minItems:{$ref:"#/definitions/positiveIntegerDefault0"},uniqueItems:{type:"boolean","default":!1},maxProperties:{$ref:"#/definitions/positiveInteger"},minProperties:{$ref:"#/definitions/positiveIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{anyOf:[{type:"boolean"},{$ref:"#"}],"default":{}},definitions:{type:"object",additionalProperties:{$ref:"#"},"default":{}},properties:{type:"object",additionalProperties:{$ref:"#"},"default":{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},"default":{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},"enum":{type:"array",minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},dependencies:{exclusiveMaximum:["maximum"],exclusiveMinimum:["minimum"]},"default":{}}},function(e,t){"use strict";var r={};r["date-time"]=/(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/,r.uri=/^([a-zA-Z][a-zA-Z0-9+-.]*:){0,1}\/\/[^\s]*$/,r.email=/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,r.ipv4=/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,r.ipv6=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|[fF][eE]80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::([fF]{4}(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,r.hostname=/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))*$/,e.exports=r}])})},function(e,t,r){var n=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=r(2),o=function(e){function t(r,n,i,o){e.call(this,r,n,i,o),Array.prototype.push.apply(this.allowedEvents,t.allowedEvents)}return n(t,e),t.findIdFromEmbedUrl=function(e){var t,r=/reportId="?([^&]+)"?/,n=e.match(r);return n&&(t=n[1]),t},t.prototype.addFilter=function(e,t){var r=this.getTargetUrl(t);return this.hpm.post(r+"/filters",e,{uid:this.config.uniqueId})["catch"](function(e){throw e.body})},t.prototype.getFilters=function(e){var t=this.getTargetUrl(e);return this.hpm.get(t+"/filters",{uid:this.config.uniqueId}).then(function(e){return e.body},function(e){throw e.body})},t.prototype.getId=function(){var e=this.config.id||this.element.getAttribute(t.reportIdAttribute)||t.findIdFromEmbedUrl(this.config.embedUrl);if("string"!=typeof e||0===e.length)throw new Error("Report id is required, but it was not found. You must provide an id either as part of embed configuration or as attribute '"+t.reportIdAttribute+"'.");return e},t.prototype.getPages=function(){return this.hpm.get("/report/pages",{uid:this.config.uniqueId}).then(function(e){return e.body},function(e){throw e.body})},t.prototype.setPage=function(e){var t={name:e,displayName:null};return this.hpm.put("/report/pages/active",t,{uid:this.config.uniqueId})["catch"](function(e){throw e.body})},t.prototype.removeFilter=function(e,t){var r=this.getTargetUrl(t);return this.hpm["delete"](r+"/filters",e,{uid:this.config.uniqueId})["catch"](function(e){throw e.body})},t.prototype.removeAllFilters=function(){return this.hpm["delete"]("/report/allfilters",null,{uid:this.config.uniqueId})["catch"](function(e){throw e.body})},t.prototype.updateFilter=function(e,t){var r=this.getTargetUrl(t);return this.hpm.put(r+"/filters",e,{uid:this.config.uniqueId})["catch"](function(e){throw e.body})},t.prototype.updateSettings=function(e){return this.hpm.patch("/report/settings",e,{uid:this.config.uniqueId})["catch"](function(e){throw e.body})},t.prototype.getTargetUrl=function(e){var t;if(e)if("page"===e.type)t="/report/pages/"+e.name;else{if("visual"!==e.type)throw new Error("target.type must be either 'page' or 'visual'. You passed: "+e.type);t="/report/visuals/"+e.id}else t="/report";return t},t.allowedEvents=["dataSelected","filterAdded","filterUpdated","filterRemoved","pageChanged","error"],t.reportIdAttribute="powerbi-report-id",t.type="Report",t}(i.Embed);t.Report=o},function(e,t,r){var n=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=r(2),o=function(e){function t(){e.apply(this,arguments)}return n(t,e),t.prototype.getId=function(){throw Error("Not implemented. Embedding tiles is not supported yet.")},t.type="Tile",t}(i.Embed);t.Tile=o},function(e,t,r){var n=r(8),i=r(9),o=r(10);t.hpmFactory=function(e,t,r,n,o){return void 0===r&&(r="2.0.0"),void 0===n&&(n="js"),void 0===o&&(o="sdk"),new i.HttpPostMessage(e,t,{origin:o,"x-sdk-type":n,"x-sdk-version":r})},t.wpmpFactory=function(e,t,r){return new n.WindowPostMessageProxy({processTrackingProperties:{addTrackingProperties:i.HttpPostMessage.addTrackingProperties,getTrackingProperties:i.HttpPostMessage.getTrackingProperties},isErrorMessage:i.HttpPostMessage.isErrorMessage,name:e,logMessages:t,eventSourceOverrideWindow:r})},t.routerFactory=function(e){return new o.Router(e)}},function(e,t,r){!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t){"use strict";var r=function(){function e(t){var r=this;void 0===t&&(t={processTrackingProperties:{addTrackingProperties:e.defaultAddTrackingProperties,getTrackingProperties:e.defaultGetTrackingProperties},isErrorMessage:e.defaultIsErrorMessage,receiveWindow:window,name:e.createRandomString()}),this.pendingRequestPromises={},this.addTrackingProperties=t.processTrackingProperties&&t.processTrackingProperties.addTrackingProperties||e.defaultAddTrackingProperties,this.getTrackingProperties=t.processTrackingProperties&&t.processTrackingProperties.getTrackingProperties||e.defaultGetTrackingProperties,this.isErrorMessage=t.isErrorMessage||e.defaultIsErrorMessage,this.receiveWindow=t.receiveWindow||window,this.name=t.name||e.createRandomString(),this.logMessages=t.logMessages||!1,this.eventSourceOverrideWindow=t.eventSourceOverrideWindow,this.suppressMessageNotHandledWarning=t.suppressMessageNotHandledWarning||!1,this.logMessages&&console.log("new WindowPostMessageProxy created with name: "+this.name+" receiving on window: "+this.receiveWindow.document.title),
this.handlers=[],this.windowMessageHandler=function(e){return r.onMessageReceived(e)},this.start()}return e.defaultAddTrackingProperties=function(t,r){return t[e.messagePropertyName]=r,t},e.defaultGetTrackingProperties=function(t){return t[e.messagePropertyName]},e.defaultIsErrorMessage=function(e){return!!e.error},e.prototype.addHandler=function(e){this.handlers.push(e)},e.prototype.removeHandler=function(e){var t=this.handlers.indexOf(e);if(-1==t)throw new Error("You attempted to remove a handler but no matching handler was found.");this.handlers.splice(t,1)},e.prototype.start=function(){this.receiveWindow.addEventListener("message",this.windowMessageHandler)},e.prototype.stop=function(){this.receiveWindow.removeEventListener("message",this.windowMessageHandler)},e.prototype.postMessage=function(t,r){var n={id:e.createRandomString()};this.addTrackingProperties(r,n),this.logMessages&&(console.log(this.name+" Posting message:"),console.log(JSON.stringify(r,null,"  "))),t.postMessage(r,"*");var i=e.createDeferred();return this.pendingRequestPromises[n.id]=i,i.promise},e.prototype.sendResponse=function(e,t,r){this.addTrackingProperties(t,r),this.logMessages&&(console.log(this.name+" Sending response:"),console.log(JSON.stringify(t,null,"  "))),e.postMessage(t,"*")},e.prototype.onMessageReceived=function(e){var t=this;this.logMessages&&(console.log(this.name+" Received message:"),console.log("type: "+e.type),console.log(JSON.stringify(e.data,null,"  ")));var r,n=this.eventSourceOverrideWindow||e.source,i=e.data,o=this.getTrackingProperties(i);if(o&&(r=this.pendingRequestPromises[o.id]),r)this.isErrorMessage(i)?r.reject(i):r.resolve(i),delete this.pendingRequestPromises[o.id];else{var s=this.handlers.some(function(e){return e.test(i)?(Promise.resolve(e.handle(i)).then(function(e){t.sendResponse(n,e,o)}),!0):void 0});s||this.suppressMessageNotHandledWarning||console.warn("Proxy("+this.name+") did not handle message. Handlers: "+this.handlers.length+"  Message: "+JSON.stringify(i,null,"")+".")}},e.createDeferred=function(){var e={resolve:null,reject:null,promise:null},t=new Promise(function(t,r){e.resolve=t,e.reject=r});return e.promise=t,e},e.createRandomString=function(){return(Math.random()+1).toString(36).substring(7)},e.messagePropertyName="windowPostMessageProxy",e}();t.WindowPostMessageProxy=r}])})},function(e,t,r){!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t){"use strict";var r=function(){function e(e,t,r){void 0===r&&(r={}),this.defaultHeaders=r,this.targetWindow=e,this.windowPostMessageProxy=t}return e.addTrackingProperties=function(e,t){return e.headers=e.headers||{},t&&t.id&&(e.headers.id=t.id),e},e.getTrackingProperties=function(e){return{id:e.headers.id}},e.isErrorMessage=function(e){return!(200<=e.statusCode&&e.statusCode<300)},e.prototype.get=function(e,t){return void 0===t&&(t={}),this.send({method:"GET",url:e,headers:t})},e.prototype.post=function(e,t,r){return void 0===r&&(r={}),this.send({method:"POST",url:e,headers:r,body:t})},e.prototype.put=function(e,t,r){return void 0===r&&(r={}),this.send({method:"PUT",url:e,headers:r,body:t})},e.prototype.patch=function(e,t,r){return void 0===r&&(r={}),this.send({method:"PATCH",url:e,headers:r,body:t})},e.prototype["delete"]=function(e,t,r){return void 0===t&&(t=null),void 0===r&&(r={}),this.send({method:"DELETE",url:e,headers:r,body:t})},e.prototype.send=function(e){return this.assign(e.headers,this.defaultHeaders),this.windowPostMessageProxy.postMessage(this.targetWindow,e)},e.prototype.assign=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");var n=Object(e);return t.forEach(function(e){if(void 0!==e&&null!==e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])}),n},e}();t.HttpPostMessage=r}])})},function(e,t,r){!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){"use strict";var n=r(1),i=function(){function e(e){this.handlers=e,this.getRouteRecognizer=new n,this.patchRouteRecognizer=new n,this.postRouteRecognizer=new n,this.putRouteRecognizer=new n,this.deleteRouteRecognizer=new n}return e.prototype.get=function(e,t){return this.registerHandler(this.getRouteRecognizer,"GET",e,t),this},e.prototype.patch=function(e,t){return this.registerHandler(this.patchRouteRecognizer,"PATCH",e,t),this},e.prototype.post=function(e,t){return this.registerHandler(this.postRouteRecognizer,"POST",e,t),this},e.prototype.put=function(e,t){return this.registerHandler(this.putRouteRecognizer,"PUT",e,t),this},e.prototype["delete"]=function(e,t){return this.registerHandler(this.deleteRouteRecognizer,"DELETE",e,t),this},e.prototype.registerHandler=function(e,t,r,n){var i=function(e){var t=new o;return Promise.resolve(n(e,t)).then(function(e){return t})};e.add([{path:r,handler:i}]);var s={test:function(r){if(r.method!==t)return!1;var n=e.recognize(r.url);if(void 0===n)return!1;var i=n[0];return r.params=i.params,r.queryParams=n.queryParams,r.handler=i.handler,!0},handle:function(e){return e.handler(e)}};this.handlers.addHandler(s)},e}();t.Router=i;var o=function(){function e(){this.statusCode=200,this.headers={},this.body=null}return e.prototype.send=function(e,t){this.statusCode=e,this.body=t},e}();t.Response=o},function(e,t,r){var n;(function(e){(function(){"use strict";function i(e,t,r){this.path=e,this.matcher=t,this.delegate=r}function o(e){this.routes={},this.children={},this.target=e}function s(e,t,r){return function(n,o){var a=e+n;return o?void o(s(a,t,r)):new i(e+n,t,r)}}function a(e,t,r){for(var n=0,i=0;i<e.length;i++)n+=e[i].path.length;t=t.substr(n);var o={path:t,handler:r};e.push(o)}function c(e,t,r,n){var i=t.routes;for(var o in i)if(i.hasOwnProperty(o)){var s=e.slice();a(s,o,i[o]),t.children[o]?c(s,t.children[o],r,n):r.call(n,s)}}function u(e){return"[object Array]"===Object.prototype.toString.call(e)}function d(e){this.string=e}function p(e){this.name=e}function h(e){this.name=e}function f(){}function l(e,t,r){"/"===e.charAt(0)&&(e=e.substr(1));var n=e.split("/"),i=new Array(n.length);r.val="";for(var o=0;o<n.length;o++){var s,a=n[o];(s=a.match(/^:([^\/]+)$/))?(i[o]=new p(s[1]),t.push(s[1]),r.val+="3"):(s=a.match(/^\*([^\/]+)$/))?(i[o]=new h(s[1]),r.val+="1",t.push(s[1])):""===a?(i[o]=new f,r.val+="2"):(i[o]=new d(a),r.val+="4")}return r.val=+r.val,i}function m(e){this.charSpec=e,this.nextStates=[],this.charSpecs={},this.regex=void 0,this.handlers=void 0,this.specificity=void 0}function g(e){return e.sort(function(e,t){return t.specificity.val-e.specificity.val})}function v(e,t){for(var r=[],n=0,i=e.length;i>n;n++){var o=e[n];r=r.concat(o.match(t))}return r}function y(e){this.queryParams=e||{}}function b(e,t,r){var n=e.handlers,i=e.regex,o=t.match(i),s=1,a=new y(r);a.length=n.length;for(var c=0;c<n.length;c++){for(var u=n[c],d=u.names,p={},h=0;h<d.length;h++)p[d[h]]=o[s++];a[c]={handler:u.handler,params:p,isDynamic:!!d.length}}return a}function w(e){e=e.replace(/\+/gm,"%20");var t;try{t=decodeURIComponent(e)}catch(r){t=""}return t}i.prototype={to:function(e,t){var r=this.delegate;if(r&&r.willAddRoute&&(e=r.willAddRoute(this.matcher.target,e)),this.matcher.add(this.path,e),t){if(0===t.length)throw new Error("You must have an argument in the function passed to `to`");this.matcher.addChild(this.path,e,t,this.delegate)}return this}},o.prototype={add:function(e,t){this.routes[e]=t},addChild:function(e,t,r,n){var i=new o(t);this.children[e]=i;var a=s(e,i,n);n&&n.contextEntered&&n.contextEntered(t,a),r(a)}};var x=function(e,t){var r=new o;e(s("",r,this.delegate)),c([],r,function(e){t?t(this,e):this.add(e)},this)},A=["/",".","*","+","?","|","(",")","[","]","{","}","\\"],E=new RegExp("(\\"+A.join("|\\")+")","g");d.prototype={eachChar:function(e){for(var t,r=this.string,n=0;n<r.length;n++)t=r.charAt(n),e=e.put({invalidChars:void 0,repeat:!1,validChars:t});return e},regex:function(){return this.string.replace(E,"\\$1")},generate:function(){return this.string}},p.prototype={eachChar:function(e){return e.put({invalidChars:"/",repeat:!0,validChars:void 0})},regex:function(){return"([^/]+)"},generate:function(e){return e[this.name]}},h.prototype={eachChar:function(e){return e.put({invalidChars:"",repeat:!0,validChars:void 0})},regex:function(){return"(.+)"},generate:function(e){return e[this.name]}},f.prototype={eachChar:function(e){return e},regex:function(){return""},generate:function(){return""}},m.prototype={get:function(e){if(this.charSpecs[e.validChars])return this.charSpecs[e.validChars];for(var t=this.nextStates,r=0;r<t.length;r++){var n=t[r],i=n.charSpec.validChars===e.validChars;if(i=i&&n.charSpec.invalidChars===e.invalidChars)return this.charSpecs[e.validChars]=n,n}},put:function(e){var t;return(t=this.get(e))?t:(t=new m(e),this.nextStates.push(t),e.repeat&&t.nextStates.push(t),t)},match:function(e){for(var t,r,n,i=this.nextStates,o=[],s=0;s<i.length;s++)t=i[s],r=t.charSpec,"undefined"!=typeof(n=r.validChars)?-1!==n.indexOf(e)&&o.push(t):"undefined"!=typeof(n=r.invalidChars)&&-1===n.indexOf(e)&&o.push(t);return o}};var P=Object.create||function(e){function t(){}return t.prototype=e,new t};y.prototype=P({splice:Array.prototype.splice,slice:Array.prototype.slice,push:Array.prototype.push,length:0,queryParams:null});var O=function(){this.rootState=new m,this.names={}};O.prototype={add:function(e,t){for(var r,n=this.rootState,i="^",o={},s=new Array(e.length),a=[],c=!0,u=0;u<e.length;u++){var d=e[u],p=[],h=l(d.path,p,o);a=a.concat(h);for(var m=0;m<h.length;m++){var g=h[m];g instanceof f||(c=!1,n=n.put({invalidChars:void 0,repeat:!1,validChars:"/"}),i+="/",n=g.eachChar(n),i+=g.regex())}var v={handler:d.handler,names:p};s[u]=v}c&&(n=n.put({invalidChars:void 0,repeat:!1,validChars:"/"}),i+="/"),n.handlers=s,n.regex=new RegExp(i+"$"),n.specificity=o,(r=t&&t.as)&&(this.names[r]={segments:a,handlers:s})},handlersFor:function(e){var t=this.names[e];if(!t)throw new Error("There is no route named "+e);for(var r=new Array(t.handlers.length),n=0;n<t.handlers.length;n++)r[n]=t.handlers[n];return r},hasRoute:function(e){return!!this.names[e]},generate:function(e,t){var r=this.names[e],n="";if(!r)throw new Error("There is no route named "+e);for(var i=r.segments,o=0;o<i.length;o++){var s=i[o];s instanceof f||(n+="/",n+=s.generate(t))}return"/"!==n.charAt(0)&&(n="/"+n),t&&t.queryParams&&(n+=this.generateQueryString(t.queryParams,r.handlers)),n},generateQueryString:function(e,t){var r=[],n=[];for(var i in e)e.hasOwnProperty(i)&&n.push(i);n.sort();for(var o=0;o<n.length;o++){i=n[o];var s=e[i];if(null!=s){var a=encodeURIComponent(i);if(u(s))for(var c=0;c<s.length;c++){var d=i+"[]="+encodeURIComponent(s[c]);r.push(d)}else a+="="+encodeURIComponent(s),r.push(a)}}return 0===r.length?"":"?"+r.join("&")},parseQueryString:function(e){for(var t=e.split("&"),r={},n=0;n<t.length;n++){var i,o=t[n].split("="),s=w(o[0]),a=s.length,c=!1;1===o.length?i="true":(a>2&&"[]"===s.slice(a-2)&&(c=!0,s=s.slice(0,a-2),r[s]||(r[s]=[])),i=o[1]?w(o[1]):""),c?r[s].push(i):r[s]=i}return r},recognize:function(e){var t,r,n,i=[this.rootState],o={},s=!1;if(n=e.indexOf("?"),-1!==n){var a=e.substr(n+1,e.length);e=e.substr(0,n),o=this.parseQueryString(a)}for(e=decodeURI(e),"/"!==e.charAt(0)&&(e="/"+e),t=e.length,t>1&&"/"===e.charAt(t-1)&&(e=e.substr(0,t-1),s=!0),r=0;r<e.length&&(i=v(i,e.charAt(r)),i.length);r++);var c=[];for(r=0;r<i.length;r++)i[r].handlers&&c.push(i[r]);i=g(c);var u=c[0];return u&&u.handlers?(s&&"(.+)$"===u.regex.source.slice(-5)&&(e+="/"),b(u,e,o)):void 0}},O.prototype.map=x,O.VERSION="0.1.11";var j=O;r(3).amd?(n=function(){return j}.call(t,r,t,e),!(void 0!==n&&(e.exports=n))):"undefined"!=typeof e&&e.exports?e.exports=j:"undefined"!=typeof this&&(this.RouteRecognizer=j)}).call(this)}).call(t,r(2)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}}])})}])});
//# sourceMappingURL=data:application/json;base64,
