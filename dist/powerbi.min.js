!function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var o=n(1);window.Powerbi=o["default"],window.powerbi=new o["default"]},function(e,t,n){"use strict";var o=n(2),r=n(4),i=n(5),s=n(3),a=function(){function e(t){void 0===t&&(t={}),this.embeds=[],window.addEventListener("message",this.onReceiveMessage.bind(this),!1),this.config=s["default"].assign({},e.defaultConfig,t),this.config.autoEmbedOnContentLoaded&&this.enableAutoEmbed()}return e.prototype.init=function(e){var t=this;e=e&&e instanceof HTMLElement?e:document.body;var n=Array.prototype.slice.call(e.querySelectorAll("["+o["default"].embedUrlAttribute+"]"));n.forEach(function(e){return t.embed(e)})},e.prototype.embed=function(e,t){void 0===t&&(t={});var n,o=e;return n=o.powerBiEmbed?this.embedExisting(o,t):this.embedNew(o,t)},e.prototype.embedNew=function(t,n){var i=this,a=n.type||t.getAttribute(o["default"].typeAttribute);if(!a)throw new Error("Attempted to embed using config "+JSON.stringify(n)+" on element "+t.outerHTML+", but could not determine what type of component to embed. You must specify a type in the configuration or as an attribute such as '"+o["default"].typeAttribute+'="'+r["default"].name.toLowerCase()+"\"'.");n.type=a;var u=s["default"].find(function(e){return a===e.name.toLowerCase()},e.components);if(!u)throw new Error("Attempted to embed component of type: "+a+" but did not find any matching component.  Please verify the type you specified is intended.");n.getGlobalAccessToken=function(){return i.accessToken};var c=new u(t,n);return t.powerBiEmbed=c,this.embeds.push(c),c},e.prototype.embedExisting=function(e,t){var n=s["default"].find(function(t){return t.element===e},this.embeds);if(!n)throw new Error("Attempted to embed using config "+JSON.stringify(t)+" on element "+e.outerHTML+" which already has embedded comopnent associated, but could not find the existing comopnent in the list of active components. This could indicate the embeds list is out of sync with the DOM, or the component is referencing the incorrect HTML element.");return n.load(t,!0),n},e.prototype.enableAutoEmbed=function(){var e=this;window.addEventListener("DOMContentLoaded",function(t){return e.init(document.body)},!1)},e.prototype.get=function(e){var t=e;if(!t.powerBiEmbed)throw new Error("You attempted to get an instance of powerbi component associated with element: "+e.outerHTML+" but there was no associated instance.");return t.powerBiEmbed},e.prototype.reset=function(e){var t=e;if(t.powerBiEmbed){s["default"].remove(function(e){return e===t.powerBiEmbed},this.embeds),delete t.powerBiEmbed;var n=e.querySelector("iframe");n&&n.remove()}},e.prototype.onReceiveMessage=function(t){if(t)try{var n=s["default"].find(function(e){return t.source===e.iframe.contentWindow},this.embeds);if(n){var o="string"==typeof t.data?JSON.parse(t.data):t.data;s["default"].raiseCustomEvent(n.element,e.eventMap[o.event],o)}}catch(r){if("function"!=typeof this.config.onError)throw r;this.config.onError.call(window,r)}},e.components=[i["default"],r["default"]],e.eventMap={tileClicked:"tile-click",tileLoaded:"tile-load",reportPageLoaded:"report-load"},e.defaultConfig={autoEmbedOnContentLoaded:!1,onError:function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];return console.log(e[0],e.slice(1))}},e}();t.PowerBi=a,Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a},function(e,t,n){"use strict";var o=n(3),r=function(){function e(t,n){var r=this;this.element=t,this.options=o["default"].assign({},e.defaultOptions,n),this.options.accessToken=this.getAccessToken(),this.options.embedUrl=this.getEmbedUrl();var i='<iframe style="width:100%;height:100%;" src="'+this.options.embedUrl+'" scrolling="no" allowfullscreen="true"></iframe>';this.element.innerHTML=i,this.iframe=this.element.childNodes[0],this.iframe.addEventListener("load",function(){return r.load(r.options,!1)},!1)}return e.prototype.load=function(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=null),!n)throw new Error("You called load without providing message properties from the concrete embeddable class.");var r={accessToken:e.accessToken};o["default"].assign(n,r);var i={message:n};o["default"].raiseCustomEvent(this.element,i.message.action,i),this.iframe.contentWindow.postMessage(JSON.stringify(i.message),"*")},e.prototype.getAccessToken=function(){var t=this.options.accessToken||this.element.getAttribute(e.accessTokenAttribute)||this.options.getGlobalAccessToken();if(!t)throw new Error("No access token was found for element. You must specify an access token directly on the element using attribute '"+e.accessTokenAttribute+"' or specify a global token at: powerbi.accessToken.");return t},e.prototype.getEmbedUrl=function(){var t=this.options.embedUrl||this.element.getAttribute(e.embedUrlAttribute);if("string"!=typeof t||0===t.length)throw new Error("Embed Url is required, but it was not found. You must provide an embed url either as part of embed configuration or as attribute '"+e.embedUrlAttribute+"'.");return t},e.prototype.fullscreen=function(){var e=this.iframe.requestFullscreen||this.iframe.msRequestFullscreen||this.iframe.mozRequestFullScreen||this.iframe.webkitRequestFullscreen;e.call(this.iframe)},e.prototype.exitFullscreen=function(){if(this.isFullscreen(this.iframe)){var e=document.exitFullscreen||document.mozCancelFullScreen||document.webkitExitFullscreen||document.msExitFullscreen;e.call(document)}},e.prototype.isFullscreen=function(e){var t=["fullscreenElement","webkitFullscreenElement","mozFullscreenScreenElement","msFullscreenElement"];return t.some(function(t){return document[t]===e})},e.embedUrlAttribute="powerbi-embed-url",e.accessTokenAttribute="powerbi-access-token",e.typeAttribute="powerbi-type",e.defaultOptions={filterPaneEnabled:!0},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},function(e,t){"use strict";var n=function(){function e(){}return e.raiseCustomEvent=function(e,t,n){var o;if("function"==typeof CustomEvent?o=new CustomEvent(t,{detail:n,bubbles:!0,cancelable:!0}):(o=document.createEvent("CustomEvent"),o.initCustomEvent(t,!0,!0,n)),e.dispatchEvent(o),!o.defaultPrevented&&o.returnValue){var r="on"+t.replace("-",""),i=e.getAttribute(r);i&&eval.call(e,i)}},e.findIndex=function(e,t){if(!Array.isArray(t))throw new Error("You attempted to call find with second parameter that was not an array. You passed: "+t);var n;return t.some(function(t,o){return e(t)?(n=o,!0):void 0}),n},e.find=function(t,n){var o=e.findIndex(t,n);return n[o]},e.remove=function(t,n){var o=e.findIndex(t,n);n.splice(o,1)},e.assign=function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];var n=e[0];if(void 0===n||null===n)throw new TypeError("Cannot convert undefined or null to object");for(var o=Object(n),r=1;r<arguments.length;r++){var i=arguments[r];if(void 0!==i&&null!==i)for(var s in i)i.hasOwnProperty(s)&&(o[s]=i[s])}return o},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";var o=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},r=n(2),i=function(e){function t(){e.apply(this,arguments)}return o(t,e),t.prototype.getEmbedUrl=function(){var t=e.prototype.getEmbedUrl.call(this);return this.options.filterPaneEnabled||(t+="&filterPaneEnabled=false"),t},t.prototype.load=function(t,n){if(void 0===n&&(n=!1),n&&"string"!=typeof t.id)throw new Error("id must be specified when loading reports on existing elements.");var o={action:"loadReport",reportId:t.id,accessToken:null};e.prototype.load.call(this,t,n,o)},t.name="Report",t}(r["default"]);Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i},function(e,t,n){"use strict";var o=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},r=n(2),i=function(e){function t(){e.apply(this,arguments)}return o(t,e),t.prototype.getEmbedUrl=function(){var t=e.prototype.getEmbedUrl.call(this);return t},t.prototype.load=function(t,n){if(void 0===n&&(n=!1),n&&"string"!=typeof t.id)throw new Error("id must be specified when loading reports on existing elements.");var o={action:"loadTile",tileId:t.id,accessToken:null};e.prototype.load.call(this,t,n,o)},t.name="Tile",t}(r["default"]);Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i}]);
//# sourceMappingURL=data:application/json;base64,
