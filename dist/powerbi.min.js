!function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";var o=n(1);window.Powerbi=o["default"],window.powerbi=new o["default"]},function(e,t,n){"use strict";var o=n(2),r=n(5),i=n(4),s=function(){function e(t){var n=this;void 0===t&&(t={}),this.get=this.embed,this.embeds=[],window.addEventListener("message",this.onReceiveMessage.bind(this),!1),this.config=i["default"].assign({},e.defaultConfig,t),this.config.autoEmbedOnContentLoaded&&window.addEventListener("DOMContentLoaded",function(e){return n.init(document.body)},!1)}return e.prototype.init=function(e){var t=this;e=e&&e instanceof HTMLElement?e:document.body;var n=Array.prototype.slice.call(e.querySelectorAll("[powerbi-embed]"));n.forEach(function(e){return t.embed(e,{getGlobalAccessToken:function(){return t.accessToken}})})},e.prototype.embed=function(t,n){var o=this;void 0===n&&(n={});var r;if(t.powerBiEmbed&&!n.overwrite)return r=t.powerBiEmbed;t.powerBiEmbed&&n.overwrite&&this.remove(t.powerBiEmbed);var s=i["default"].find(function(e){return n.type===e.attribute||null!==t.getAttribute(e.attribute)},e.components);if(!s)throw new Error("Attempted to embed using config "+n+" on element "+t.outerHTML+", but could not determine what type of component to embed. You must specify a type in the configuration or as an attribute such as 'powerbi-report'.");return n.getGlobalAccessToken=function(){return o.accessToken},r=new s(t,n),t.powerBiEmbed=r,this.embeds.push(r),r},e.prototype.remove=function(e){i["default"].remove(function(t){return t===e},this.embeds)},e.prototype.onReceiveMessage=function(t){if(t)try{var n=JSON.parse(t.data);this.embeds.some(function(o){return t.source===o.iframe.contentWindow?(i["default"].raiseCustomEvent(o.element,e.eventMap[n.event],n),!0):!1})}catch(o){if("function"!=typeof this.config.onError)throw o;this.config.onError.call(window,o)}},e.components=[r["default"],o["default"]],e.eventMap={tileClicked:"tile-click",tileLoaded:"tile-load",reportPageLoaded:"report-load"},e.defaultConfig={autoEmbedOnContentLoaded:!1,onError:function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];return console.log(e[0],e.slice(1))}},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s},function(e,t,n){"use strict";var o=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},r=n(3),i=function(e){function t(t,n){n.loadAction="loadReport",e.call(this,t,n)}return o(t,e),t.prototype.getEmbedUrl=function(){var t=e.prototype.getEmbedUrl.call(this);if(!t){var n=this.options.id;if(n||(n=this.element.getAttribute("powerbi-report")),!n)throw new Error("Embed url cannot be constructed. 'powerbi-embed' attribute was not specified and the fallback to 'powerbi-report' were not specified either.");t="https://embedded.powerbi.com/appTokenReportEmbed?reportId="+n}return this.options.filterPaneEnabled||(t+="&filterPaneEnabled=false"),t},t.attribute="powerbi-report",t}(r["default"]);Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i},function(e,t,n){"use strict";var o=n(4),r=function(){function e(t,n){this.element=t,this.options=o["default"].assign({},e.defaultOptions,n);var r=this.getEmbedUrl(),i='<iframe style="width:100%;height:100%;" src="'+r+'" scrolling="no" allowfullscreen="true"></iframe>';this.element.innerHTML=i,this.iframe=this.element.childNodes[0],this.iframe.addEventListener("load",this.load.bind(this),!1)}return e.prototype.load=function(){var e=window.getComputedStyle(this.element),t=this.getAccessToken(),n={message:{action:this.options.loadAction,accessToken:t,width:e.width,height:e.height}};o["default"].raiseCustomEvent(this.element,"embed-init",n),this.iframe.contentWindow.postMessage(JSON.stringify(n.message),"*")},e.prototype.getAccessToken=function(){var e=this.options.accessToken||this.element.getAttribute("powerbi-access-token")||this.options.getGlobalAccessToken();if(!e)throw new Error("No access token was found for element. You must specify an access token directly on the element using attribute 'powerbi-access-token' or specify a global token at: powerbi.accessToken.");return e},e.prototype.getEmbedUrl=function(){var e=this.options.embedUrl||this.element.getAttribute("powerbi-embed");return e},e.prototype.fullscreen=function(){var e=this.iframe.requestFullscreen||this.iframe.msRequestFullscreen||this.iframe.mozRequestFullScreen||this.iframe.webkitRequestFullscreen;e.call(this.iframe)},e.prototype.exitFullscreen=function(){if(this.isFullscreen(this.iframe)){var e=document.exitFullscreen||document.mozCancelFullScreen||document.webkitExitFullscreen||document.msExitFullscreen;e.call(document)}},e.prototype.isFullscreen=function(e){var t=["fullscreenElement","webkitFullscreenElement","mozFullscreenScreenElement","msFullscreenElement"];return t.some(function(t){return document[t]===e})},e.defaultOptions={filterPaneEnabled:!0},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},function(e,t){"use strict";var n=function(){function e(){}return e.raiseCustomEvent=function(e,t,n){var o;if("function"==typeof window.CustomEvent?o=new CustomEvent(t,{detail:n,bubbles:!0,cancelable:!0}):(o=document.createEvent("CustomEvent"),o.initCustomEvent(t,!0,!0,n)),e.dispatchEvent(o),!o.defaultPrevented&&o.returnValue){var r="on"+t.replace("-",""),i=e.getAttribute(r);i&&eval.call(e,i)}},e.findIndex=function(e,t){if(!Array.isArray(t))throw new Error("You attempted to call find with second that was not an array. You passed: "+t);var n;return t.some(function(t,o){return e(t)?(n=o,!0):void 0}),n},e.find=function(t,n){var o=e.findIndex(t,n);return n[o]},e.remove=function(t,n){var o=e.findIndex(t,n);n.splice(o,1)},e.assign=function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];var n=e[0];if(void 0===n||null===n)throw new TypeError("Cannot convert undefined or null to object");for(var o=Object(n),r=1;r<arguments.length;r++){var i=arguments[r];if(void 0!==i&&null!==i)for(var s in i)i.hasOwnProperty(s)&&(o[s]=i[s])}return o},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n},function(e,t,n){"use strict";var o=this&&this.__extends||function(e,t){function n(){this.constructor=e}for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},r=n(3),i=function(e){function t(t,n){n.loadAction="loadTile",e.call(this,t,n)}return o(t,e),t.prototype.getEmbedUrl=function(){var t=e.prototype.getEmbedUrl.call(this);if(!t){var n=this.element.getAttribute("powerbi-dashboard"),o=this.element.getAttribute("powerbi-tile");if(!n||!o)throw new Error("Embed url cannot be constructed. 'powerbi-embed' attribute was not specified and the fallback to 'powerbi-dashboard' and 'powerbi-tile' were not specified either.");t="https://app.powerbi.com/embed?dashboardId="+n+"&tileId="+o}return t},t.attribute="powerbi-tile",t}(r["default"]);Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i}]);
//# sourceMappingURL=data:application/json;base64,
